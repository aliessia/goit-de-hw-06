from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, col, window, avg
from pyspark.sql.types import StructType, StringType, IntegerType, DoubleType, TimestampType

# 1. Ініціалізація Spark
spark = SparkSession.builder \
    .appName("Kafka IoT Alert System") \
    .master("local[*]") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0") \
    .getOrCreate()


spark.sparkContext.setLogLevel("WARN")

# 2. Схема Kafka JSON-повідомлення
schema = StructType() \
    .add("sensor_id", IntegerType()) \
    .add("timestamp", StringType()) \
    .add("temperature", DoubleType()) \
    .add("humidity", DoubleType())

# 3. Зчитування Kafka-потоку
kafka_df = spark.readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", "localhost:9092") \
    .option("subscribe", "building_sensors") \
    .option("startingOffsets", "latest") \
    .load()

# 4. Перетворення JSON-повідомлення
json_df = kafka_df.selectExpr("CAST(value AS STRING)") \
    .select(from_json(col("value"), schema).alias("data")) \
    .select("data.*") \
    .withColumn("timestamp", col("timestamp").cast(TimestampType()))

# 5. Sliding window агрегування
aggregated = json_df \
    .withWatermark("timestamp", "10 seconds") \
    .groupBy(window("timestamp", "1 minute", "30 seconds")) \
    .agg(
        avg("temperature").alias("avg_temp"),
        avg("humidity").alias("avg_humidity")
    )

# 6. Зчитування умов алертів з CSV
rules_df = spark.read.csv("alerts_conditions.csv", header=True, inferSchema=True)

# 7. Cross join + фільтрація по умовам
joined = aggregated.crossJoin(rules_df)

alerts = joined.filter(
    "((min_temp = -999 OR avg_temp >= min_temp) AND " +
    "(max_temp = -999 OR avg_temp <= max_temp) AND " +
    "(min_humidity = -999 OR avg_humidity >= min_humidity) AND " +
    "(max_humidity = -999 OR avg_humidity <= max_humidity))"
)

# 8. Формування JSON-повідомлень для Kafka
alerts_result = alerts.selectExpr(
    "to_json(named_struct('alert_code', alert_code, 'avg_temp', avg_temp, 'avg_humidity', avg_humidity, 'message', message)) AS value"
)

# 9. Запис у Kafka топік
alerts_result.writeStream \
    .format("kafka") \
    .outputMode("append") \
    .option("kafka.bootstrap.servers", "localhost:9092") \
    .option("topic", "alerts") \
    .option("checkpointLocation", "/tmp/kafka_alerts_checkpoint") \
    .start() \
    .awaitTermination()



